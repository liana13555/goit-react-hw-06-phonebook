{"version":3,"sources":["components/SectionTitle/SectionTitle.styled.jsx","components/SectionTitle/SectionTitle.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/App/App.styled.jsx","components/App/App.jsx","index.js"],"names":["Title","styled","h2","SectionTitle","title","children","FormContact","form","FormButton","button","ContactForm","propOnSubmit","useState","name","setName","number","setNumber","handleChange","event","currentTarget","value","reset","onSubmit","e","preventDefault","type","pattern","required","onChange","Filter","List","ol","ListItem","li","ButtonDelete","ContactList","contacts","onDelete","map","contact","onClick","id","Container","div","App","setContacts","filter","setFilter","useEffect","localStorage","getItem","parsedContacts","JSON","parse","setItem","stringify","data","find","toLowerCase","alert","newContact","uuidv4","prevState","normalizedFilter","includes","getFilterContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8940bdb.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Title = styled.h2`\r\n  margin-top: 30px;\r\n  margin-bottom: 30px;\r\n  text-align: left;\r\n  text-transform: uppercase;\r\n`;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Title } from './SectionTitle.styled';\r\n\r\nexport default function SectionTitle ({title, children}) {\r\n    return (\r\n        <section>\r\n            <Title>{title}</Title>\r\n            {children}\r\n        </section>\r\n    );\r\n}\r\n\r\nSectionTitle.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    // children: PropTypes.node.isRequired,\r\n}","import styled from '@emotion/styled';\r\n\r\nexport const FormContact = styled.form`\r\n  max-width: 300px;\r\n  padding: 10px;\r\n\r\n  background-color: #a6d8dd;\r\n  border: 2px solid #1a223b;\r\n  border-radius: 5px;  \r\n  cursor: pointer; \r\n`;\r\n\r\nexport const FormButton = styled.button`\r\n  margin-top: 20px;\r\n  padding: 5px;\r\n  \r\n  background-color: #5283ec;\r\n  cursor: pointer; \r\n`;\r\n\r\n","import { useState } from 'react';\r\nimport { FormContact, FormButton } from './ContactForm.styled';\r\n\r\nexport default function ContactForm({propOnSubmit}) {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n\r\n    const handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        propOnSubmit({ name, number });\r\n        reset();\r\n    };\r\n\r\n    const reset = () => {\r\n        setName('')\r\n        setNumber('')\r\n    };\r\n\r\n    return (\r\n        <FormContact onSubmit={handleSubmit}>\r\n            <label>\r\n                Name\r\n                <br />\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer\"\r\n                    required\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                />\r\n            </label>\r\n            <br />            \r\n            <label> Number\r\n                <br />\r\n                <input\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    value={number}\r\n                    onChange={handleChange}\r\n                />\r\n            </label>\r\n            <br />\r\n            <FormButton type=\"submit\">\r\n                Add contact\r\n            </FormButton>         \r\n        </FormContact>\r\n    );\r\n}\r\n\r\n\r\n\r\n// import React, { Component } from 'react';\r\n// import { FormContact, FormButton } from './ContactForm.styled';\r\n\r\n// export default class ContactForm extends Component {\r\n//     state = {\r\n//         contacts: [\r\n//             { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n//             { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n//             { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n//             { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n//         ],\r\n//         name: '',\r\n//         number: ''\r\n//     };\r\n\r\n//     handleChange = e => {\r\n//         const { name, value } = e.currentTarget;\r\n//         this.setState({\r\n//             [name]: value,\r\n//         })\r\n//     };\r\n\r\n//     handleSubmit = e => {\r\n//         e.preventDefault();\r\n\r\n//         this.props.propOnSubmit(this.state);\r\n//         this.reset();\r\n//     };\r\n\r\n//     reset = () => {\r\n//         this.setState({name: '', number: ''})\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <FormContact onSubmit={this.handleSubmit}>\r\n//                 <label>\r\n//                     Name\r\n//                <br />\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name=\"name\"\r\n//                 pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//                 title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer\"\r\n//                 required\r\n//                 value={this.state.name}\r\n//                 onChange={this.handleChange}\r\n//               />\r\n//             </label>\r\n\r\n//             <br />\r\n            \r\n//             <label> Number\r\n//                <br />\r\n//               <input\r\n//                 type=\"tel\"\r\n//                 name=\"number\"\r\n//                 pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//                 title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//                 required\r\n//                 value={this.state.number}\r\n//                 onChange={this.handleChange}\r\n//               />\r\n//             </label>\r\n\r\n\r\n//            <br />\r\n//           <FormButton type=\"submit\">\r\n//             Add contact\r\n//           </FormButton>\r\n         \r\n//         </FormContact>  \r\n//         )\r\n//     };\r\n// }","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ value, onChange  }) => (\r\n    <label>\r\n        Find contacts by name\r\n        <br/>\r\n                <input\r\n                    type=\"text\"\r\n            value={value} onChange={onChange}/>\r\n    </label>\r\n);\r\n\r\nexport default Filter;\r\n       \r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n}","import styled from '@emotion/styled';\r\n\r\nexport const List = styled.ol`\r\n  max-width: 300px;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\nmargin-bottom: 8px;\r\n \r\n`;\r\n\r\nexport const ButtonDelete = styled.button`\r\n  margin-left: 8px;\r\n\r\n  background-color: #5283ec;\r\n  cursor: pointer; \r\n`;\r\n\r\n","import PropTypes from 'prop-types';\r\nimport {List, ListItem, ButtonDelete} from './ContactList.styled';\r\n\r\nexport default function ContactList({ contacts, onDelete }) {   \r\n    return (\r\n        <List>\r\n            {contacts.map(contact => (\r\n                <ListItem key={contact.id} >{contact.name}: {contact.number}\r\n                    <ButtonDelete\r\n                        type=\"button\"\r\n                        onClick={() => onDelete(contact.id)}\r\n                    >\r\n                        Delete\r\n                    </ButtonDelete>                \r\n                </ListItem>\r\n            ))}\r\n        </List>\r\n    )\r\n}\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    onDelete: PropTypes.func.isRequired,\r\n}","import styled from '@emotion/styled';\r\n\r\nexport const Container = styled.div`\r\n  max-width: 300px;\r\n  margin-top: 20px;\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n  padding: 50px;\r\n  background-color: #a6d8dd;\r\n  border-radius: 10px;  \r\n`;","import { useState, useEffect } from 'react';\r\nimport SectionTitle from '../SectionTitle';\r\nimport ContactForm from '../ContactForm';\r\nimport Filter from '../Filter';\r\nimport ContactList from '../ContactList';\r\nimport { Container } from './App.styled';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport default function App() {\r\n  const [contacts, setContacts] = useState([\r\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n  ]);\r\n  const [filter, setFilter] = useState('');\r\n\r\n  useEffect(() => {\r\n    const contacts = localStorage.getItem('contacts');\r\n    const parsedContacts = JSON.parse(contacts);\r\n    setContacts(parsedContacts);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('contacts', JSON.stringify(contacts));\r\n  }, [contacts])\r\n\r\n\r\n  const addContact = data => {\r\n    if (contacts.find(\r\n      contact => contact.name.toLowerCase() === data.name.toLowerCase()\r\n    )) {\r\n      alert(`${data.name} is already in contacts.`);\r\n    } else if (contacts.find(\r\n      contact => contact.number === data.number)) {\r\n      alert(`This number ${data.number} is already in contacts`);\r\n    } else {\r\n      const newContact = {\r\n        id: uuidv4(),\r\n        name: data.name,\r\n        number: data.number,\r\n      };\r\n\r\n      setContacts(prevState => [...prevState, newContact]);\r\n    };\r\n  };\r\n\r\n  const changeFilter = e => {\r\n    setFilter(e.currentTarget.value);\r\n  };  \r\n\r\n  const getFilterContacts = () => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(contacts =>\r\n      contacts.name.toLowerCase().includes(normalizedFilter));\r\n  };\r\n\r\n  const deleteContact = id => {\r\n    setContacts(contacts.filter(contact => contact.id !== id))\r\n  }; \r\n\r\n  return (\r\n    <Container>\r\n      <SectionTitle title=\"Phonebook\">\r\n        <ContactForm propOnSubmit={addContact} />\r\n      </SectionTitle>\r\n\r\n      <SectionTitle title=\"Contacts\">\r\n        <Filter\r\n          value={filter}\r\n          onChange={changeFilter} />\r\n        <ContactList\r\n          contacts={getFilterContacts()}\r\n          onDelete={deleteContact}\r\n        />\r\n      </SectionTitle>\r\n\r\n    </Container>\r\n  );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App.jsx';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}